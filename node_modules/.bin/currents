#! /usr/bin/env node
"use strict";var Wt=Object.create;var te=Object.defineProperty;var zt=Object.getOwnPropertyDescriptor;var Xt=Object.getOwnPropertyNames;var Zt=Object.getPrototypeOf,er=Object.prototype.hasOwnProperty;var tr=(e,t)=>{for(var r in t)te(e,r,{get:t[r],enumerable:!0})},rr=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of Xt(t))!er.call(e,s)&&s!==r&&te(e,s,{get:()=>t[s],enumerable:!(o=zt(t,s))||o.enumerable});return e};var a=(e,t,r)=>(r=e!=null?Wt(Zt(e)):{},rr(t||!e||!e.__esModule?te(r,"default",{value:e,enumerable:!0}):r,e));var Ii=require("source-map-support/register"),qt=require("commander");var re=require("debug"),or=a(require("fs-extra")),i=(0,re.debug)("currents"),nr=null;function _e(){re.debug.enable("currents,currents:*")}function fe(e){nr=e}var v=class extends Error{};var sr=[];function Re(e){sr.push(e)}var g=a(require("chalk")),b=a(require("util"));var Ie=[],Ce=[];var x=(...e)=>{let t=b.default.format(...e);Re(t),console.log(t)},B=x,d=(...e)=>{let t=b.default.format(...e);return Ce.push(t),i("WARNING: ",t),x(g.default.bgYellow.black(" WARNING "),t)};var Te=(...e)=>x(g.default.green.bold(b.default.format(...e))),l=(...e)=>{let t=b.default.format(...e);return Ie.push(t),i("ERROR: ",t),x(g.default.bgRed.white(" ERROR "),t)};var w=(e=2)=>console.log(Array(e).fill("").join(`
`)),go=g.default.cyan,_o=g.default.blueBright,fo=g.default.red,Ro=g.default.yellow,Io=g.default.green,Co=g.default.gray,To=g.default.white,ho=g.default.black,Oo=g.default.magenta,T=g.default.dim,Po=g.default.bold;var f={debug:{name:"Debug",env:"CURRENTS_DEBUG",cli:"--debug"},ciBuildId:{name:"CI Build ID",env:"CURRENTS_CI_BUILD_ID",cli:"--ci-build-id"},recordKey:{name:"Record Key",env:"CURRENTS_RECORD_KEY",cli:"--key"},projectId:{name:"Project ID",env:"CURRENTS_PROJECT_ID",cli:"--project-id"},tag:{name:"Currents Tag",env:"CURRENTS_TAG",cli:"--tag"},disableTitleTags:{name:"Disable Title Tags",env:"CURRENTS_DISABLE_TITLE_TAGS",cli:"--disable-title-tags"},removeTitleTags:{name:"Remove Title Tags",env:"CURRENTS_REMOVE_TITLE_TAGS",cli:"--remove-title-tags"},machineId:{name:"Machine ID",env:"CURRENTS_MACHINE_ID",cli:"--machine-id"},reportDir:{name:"Report Directory",env:"CURRENTS_REPORT_DIR",cli:"--report-dir"}};function P(e){return f[e].env}function he(e){return f[e].cli}function Oe(e){return f[e].name}function Pe(){return{projectId:process.env[f.projectId.env],recordKey:process.env[f.recordKey.env],ciBuildId:process.env[f.ciBuildId.env],tag:process.env[f.tag.env]?process.env[f.tag.env]?.split(",").map(e=>e.trim()):void 0,disableTitleTags:!!process.env[f.disableTitleTags.env],removeTitleTags:!!process.env[f.removeTitleTags.env],debug:!!process.env[f.debug.env],machineId:process.env[f.machineId.env]}}var Ue=a(require("fs"));function Ae(e){return{ciBuildId:e.ciBuildId,projectId:e.projectId,recordKey:e.key,tag:e.tag,removeTitleTags:e.removeTitleTags,disableTitleTags:e.disableTitleTags,debug:e.debug,machineId:e.machineId,reportDir:e.reportDir}}function Se(){if(process.env.CURRENTS_REPORTER_CONFIG_PATH)try{let e=JSON.parse(Ue.default.readFileSync(process.env.CURRENTS_REPORTER_CONFIG_PATH).toString());return i("CLI options from file: %o",e),e}catch{return{}}return{}}var ar=i.extend("config"),cr=["projectId","recordKey"],ne=null;function Le(e){let t={...oe(e),...oe(Se()),...oe(Pe())};cr.forEach(r=>{if(!t[r])throw l(`${Oe(r)} is required for Currents Reporter. Use the following methods to set Currents Project ID:
- as environment variable: ${T(P(r))}
- as CLI flag of the command: ${T(he(r))}`),new v("Missing required config variable")}),ne=t,ar("Resolved Currents config: %o",ne)}function oe(e){return Object.entries(e??{}).reduce((t,[r,o])=>o===void 0?t:{...t,[r]:o},{})}function F(){return ne}var Dt=require("lodash"),W=a(require("path")),bt=a(require("semver"));var qe=require("util"),Qe=require("zlib");var Je=a(require("lodash"));var ve=a(require("axios")),xe=a(require("axios-retry")),we=a(require("lodash"));var se=()=>process.env.CURRENTS_API_URL??"https://cy.currents.dev",Ne=()=>3e4;var ie=require("axios"),ae=a(require("pretty-ms"));var De=i.extend("http"),H=e=>[3*1e3,15*1e3,30*1e3][e-1],be=e=>(De("isRetriableError: %o",{message:e.message,code:"code"in e?e.code:void 0,status:"response"in e?e.response?.status:void 0,headers:"response"in e?e.response?.headers:void 0,data:"response"in e?e.response?.data:void 0,isAxiosError:(0,ie.isAxiosError)(e)}),"code"in e&&e.code&&["ECONNABORTED","ECONNREFUSED","ECONNRESET","ETIMEDOUT","ENETRESET"].includes(e.code)?!0:(0,ie.isAxiosError)(e)?[429,502,503,504].includes(e.response?.status??0):!1),k=()=>3;function Be(e,t,r){De("Network request '%s' failed: '%s'. Next attempt is in %s (%d/%d).",`${r.method?.toUpperCase()} ${r.url}`,t.message,(0,ae.default)(H(e)),e,k()),d("Network request '%s' failed: '%s'. Next attempt is in %s (%d/%d).",`${r.method?.toUpperCase()} ${r.url}`,t.message,(0,ae.default)(H(e)),e,k())}var ye=i.extend("http"),G=null;function ur(){let e=ve.default.create({baseURL:se(),timeout:Ne(),transitional:{clarifyTimeoutError:!0}});return e.interceptors.request.use(t=>{let r=t["axios-retry"]?.retryCount??0;t.headers.get("Content-Type")||t.headers.set("Content-Type","application/json");let o={...we.default.pick(t,"method","url","headers"),data:Buffer.isBuffer(t.data)?"buffer":t.data};return r?ye("network request retry: %o",Me({...o,isRetry:!0})):ye("network request: %o",Me(o)),t}),(0,xe.default)(e,{retries:k(),retryCondition:be,retryDelay:H,shouldResetTimeout:!0,onRetry:Be}),e}function Fe(){return G||(G=ur(),G)}function Me(e){return{method:e.method,baseUrl:se(),url:e.url,data:e.isRetry?"<retry>":mr(e.data),headers:{...e.headers,"x-currents-key":"***"}}}function mr(e){return e?.results?.raw?{...e,results:{...e.results,raw:"***"}}:e}var Ge=require("axios"),je=a(require("lodash")),_=require("ts-pattern");function Ve(e){(0,_.match)(e).when(Ge.isAxiosError,pr).otherwise(()=>{d("Unexpected error while sending network request: %s",e)})}function pr(e){return(0,_.match)(e).with({code:"ECONNABORTED"},()=>{d("Network connection aborted")}).with({code:"ECONNREFUSED"},()=>{d("Network connection aborted")}).with({code:"ECONNRESET"},()=>{d("Network connection reset")}).with({code:"ETIMEDOUT"},()=>{d("Network connection timeout")}).with({response:_.P.not(_.P.nullish)},t=>{lr(t,{status:t.response.status,data:t.response.data})}).otherwise(t=>{d(`[currents] Unexpected network error: %s
%O`,e.message,{method:e.response?.config.method,url:e.response?.config.url,status:e.response?.status,payload:e.response?.config.data})})}function lr(e,{status:t,data:r}){(0,_.match)(t).with(401,()=>{d(`[currents] ${e.response?.config.method} ${e.response?.config.url}} - 401 Unauthorized Request from cloud service`)}).with(400,()=>{d(`[currents] ${e.response?.config.method} ${e.response?.config.url} - 400 Bad Request from cloud service:
%o`,r)}).with(429,()=>{d(`[currents] ${e.response?.config.method} ${e.response?.config.url} - 429 Too Many Requests from cloud service`)}).with(422,()=>{dr(e,r)}).otherwise(()=>{d(`[currents] Unexpected network response: %s
%O`,e.message,{method:e.response?.config.method,url:e.response?.config.url,status:e.response?.status})})}function dr(e,t){(0,_.match)(t).with({code:He.MISSING_SUITE,message:_.P.string,errors:_.P.array(_.P.string)},async r=>{let{message:o,errors:s}=r;w(1),l(...ke(o,s))}).with({code:He.RUN_EXPIRED,message:_.P.string},r=>{d(r.message)}).with({message:_.P.string,errors:_.P.array(_.P.string)},r=>{let{message:o,errors:s}=r;w(1),d(...ke(o,s)),w(1)}).otherwise(()=>{d(`[currents] Unexpected network response: %s
%O`,e.message,{method:e.response?.config.method,url:e.response?.config.url,status:e.response?.status})})}var He={RUN_CANCELLED:"RUN_CANCELLED",RUN_EXPIRED:"RUN_EXPIRED",MISSING_SUITE:"MISSING_SUITE"};function ke(e,t){return je.default.isString(e)?t?.length===0?[e]:[e,`
${(t??[]).map(r=>`  - ${r}`).join(`
`)}
`]:["Unexpected network error"]}var Ke=i.extend("http");async function $e(e,t=Fe){try{let r=await t().request(e);return Ke("network response: %o",{...Je.default.omit(r,"request","config"),url:r.config.url,method:r.config.method}),r}catch(r){let o=r;throw Ke("network error: %o",{code:o.code,message:o.message,url:o.config?.url,method:o.config?.method,status:o.response?.status,headers:o.response?.headers,data:o.response?.data}),Ve(o),o}}var Ye=i.extend("run"),Er=(0,qe.promisify)(Qe.gzip);async function We(e){try{Ye("Run params: %o",e);let t=await gr(JSON.stringify(e));return $e({url:"v2/runs",method:"POST",headers:{"Content-Type":"application/json","Content-Encoding":"gzip"},data:t}).then(r=>r.data)}catch(t){throw Ye("Failed to create the run:",t),t}}async function gr(e){try{return await Er(e)}catch(t){throw l("Failed to compress run payload:",t),t}}var pt=a(require("fs-extra")),lt=require("jest-cli"),dt=a(require("tmp"));var U=a(require("fs-extra")),y=a(require("path"));async function ze(e){let t=await _r(e?.reportDir);if(!t)throw new Error("Failed to find the report dir");return{reportDir:t,configFilePath:e?.configFilePath??y.default.join(t,"config.json")}}async function _r(e){return e?(await j(e),e):fr(process.cwd(),".currents-report")}async function fr(e,t){let r=await U.default.readdir(e),o=null;for(let s of r){let m=y.default.join(e,s),p=await U.default.stat(m);p.isDirectory()&&s.startsWith(t)&&(!o||p.birthtime>o.birthtime)&&(o={name:s,birthtime:p.birthtime})}return o?o.name:null}async function j(e){try{return await U.default.pathExists(e)}catch{return l("Error checking if path exists:",l),!1}}async function Xe(e){let t=y.default.join(e,"instances");return Rr(t)}async function Rr(e){let t=await U.default.readdir(e),r=[];for(let o of t){let s=y.default.join(e,o);(await U.default.stat(s)).isFile()&&r.push(s)}return r}async function S(e){try{return await U.default.readJson(e)}catch(t){throw l("Error while reading JSON file: %s",e,t),l}}async function ce(e,t){try{return await U.default.writeFile(e,t,"utf8"),e}catch(r){throw l(`Error writing file at ${e}:`,r),r}}var V={};tr(V,{getNanoid:()=>Ir,userFacingNanoid:()=>me});var ue=require("nanoid"),Ze="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",Ir=(e=16)=>(0,ue.customAlphabet)(Ze,e)(),me=(0,ue.customAlphabet)(Ze,12);var ut=require("lodash");var et=require("lodash"),Cr=["bail","clearCache","clearMocks","collectCoverage","collectCoverageFrom","color","colors","config","coverage","coverageDirectory","coveragePathIgnorePatterns","coverageProvider","coverageReporters","coverageThreshold","debug","detectLeaks","detectOpenHandles","errorOnDeprecated","expand","forceExit","json","listTests","logHeapUsage","noStackTrace","notify","notifyMode","openHandlesTimeout","outputFile","prettierPath","reporters","runner","shard","showConfig","showSeed","silent","testNamePattern","verbose","waitNextEventLoopTurnForUnhandledRejectionEvents","watch","watchAll","watchPathIgnorePatterns","watchman"];function tt(e){return(0,et.omit)(e,...Cr)}function rt(e){let t=[];for(let[r,o]of Object.entries(e))r==="_"||r==="$0"||r.includes("-")||(typeof o=="boolean"?o&&t.push(`--${r}`):Array.isArray(o)?o.forEach(s=>{t.push(`--${r}=${s}`)}):t.push(`--${r}=${o}`));return t.join(" ")}var st=a(require("fs")),it=require("jest-config"),at=require("lodash"),pe=a(require("path"));function K(e,t){return(...r)=>new Promise((o,s)=>{let m=0,p=()=>{m++;try{let E=e(...r);o(E)}catch(E){if(m>=t.length)s(E);else{let I=t[m-1];setTimeout(p,I)}}};p()})}var ot=a(require("fs-extra")),Tr=a(require("path"));async function J(e){let t=await ot.default.pathExists(e);if(!t)throw new Error("File does not exist");return t}var nt=i.extend("jest-discovery");async function ct(e){try{let{config:t,configPath:r}=await(0,it.readInitialOptions)(e),o=(0,at.omit)(t,["collectCoverage","collectCoverageFrom","coverageDirectory","coveragePathIgnorePatterns","coverageProvider","coverageReporters","coverageThreshold","detectLeaks","detectOpenHandles","reporters","logHeapUsage","listTests","notify","notifyMode","silent","verbose","watch","watchAll","watchman","watchPlugins","shard"]);if(o.rootDir&&Object.keys(o).length===1)return null;let s=pe.default.resolve(r?pe.default.dirname(r):process.cwd(),`.jest-scanner-${new Date().getTime()}.config.js`),m=`module.exports=${JSON.stringify(o,null,2)}`;return nt("configFileContent: %O",m),st.default.writeFileSync(s,m),await K(J,[200,200,200,200,200,1e3])(s),s}catch(t){return l("Failed to recreate the config file"),nt("error %o",t),null}}async function mt(e){let t="!!##ThisPatternWillNotMatchAnyTestName##!!",r=e.options,o=tt(r),s=rt(o),m=r.config,p=await ct(m);return{cliArgs:[s,"--testNamePattern",t,"--reporters","@currents/cmd/discovery/jest","--shard=1/1",p?`--config=${p}`:"",...e.args].filter(I=>!(0,ut.isEmpty)(I)),configFilePath:p}}var hr=i.extend("jest-discovery");async function Et(e,t){console.time(T("@currents/jest:fullTestSuite-ready"));let{cliArgs:r,configFilePath:o}=await mt(t);try{let s=dt.default.fileSync({postfix:".json"});return hr("running scanner: %o",r),process.env.CURRENTS_DISCOVERY_PATH=s.name,await(0,lt.run)(r.concat(["--openHandlesTimeout=0"])),await K(J,Array.from({length:300},()=>100))(s.name),console.timeEnd(T("@currents/jest:fullTestSuite-ready")),await S(s.name)}catch(s){return l("Failed to obtain the jest full test suite:",s),[]}finally{o&&pt.default.unlinkSync(o)}}var D=class{constructor(t){this.config=t}async getFullTestSuite(){return[]}};var $=class extends D{constructor(t){super(t)}async getFullTestSuite(){return Et(this.config.frameworkConfig,this.config.cliArgs)}};function gt(e){switch(e.framework){case"jest":return new $(e);default:return new D(e)}}var u=require("lodash");var Y=i.extend("ci"),Or=(e,...t)=>(0,u.chain)(t).compact().join(e).value(),Pr=(e,t)=>(0,u.set)(e,(0,u.camelCase)(t),process.env[t]),c=e=>(0,u.transform)(e,Pr,{}),Ur=()=>process.env.TF_BUILD&&process.env.TF_BUILD_BUILDNUMBER,Ar=()=>process.env.TF_BUILD&&process.env.AZURE_HTTP_USER_AGENT,Sr=()=>(0,u.some)(process.env,(e,t)=>/^CODEBUILD_/.test(t)),Lr=()=>process.env.bamboo_buildNumber,Nr=()=>process.env.CI_NAME&&process.env.CI_NAME==="codeship"&&process.env.CODESHIP,Dr=()=>process.env.CI_NAME&&process.env.CI_NAME==="codeship"&&!process.env.CODESHIP,br=()=>(0,u.some)(process.env,(e,t)=>/^CONCOURSE_/.test(t)),Br=()=>process.env.GITLAB_CI||process.env.CI_SERVER_NAME&&/^GitLab/.test(process.env.CI_SERVER_NAME),yr=()=>process.env.GCP_PROJECT||process.env.GCLOUD_PROJECT||process.env.GOOGLE_CLOUD_PROJECT,Mr=()=>process.env.JENKINS_URL||process.env.JENKINS_HOME||process.env.JENKINS_VERSION||process.env.HUDSON_URL||process.env.HUDSON_HOME,vr=()=>process.env.WERCKER||process.env.WERCKER_MAIN_PIPELINE_STARTED,xr={appveyor:"APPVEYOR",azure:Ar,awsCodeBuild:Sr,bamboo:Lr,bitbucket:"BITBUCKET_BUILD_NUMBER",buildkite:"BUILDKITE",circle:"CIRCLECI",codeshipBasic:Nr,codeshipPro:Dr,concourse:br,codeFresh:"CF_BUILD_ID",drone:"DRONE",githubActions:"GITHUB_ACTIONS",gitlab:Br,goCD:"GO_JOB_NAME",googleCloud:yr,jenkins:Mr,semaphore:"SEMAPHORE",shippable:"SHIPPABLE",teamcity:"TEAMCITY_VERSION",teamfoundation:Ur,travis:"TRAVIS",wercker:vr,netlify:"NETLIFY",layerci:"LAYERCI"};function wr(){let{env:e}=process;return(0,u.findKey)(xr,t=>{if((0,u.isString)(t))return e[t];if((0,u.isFunction)(t))return t()})}var _t=()=>({appveyor:c(["APPVEYOR_JOB_ID","APPVEYOR_ACCOUNT_NAME","APPVEYOR_PROJECT_SLUG","APPVEYOR_BUILD_NUMBER","APPVEYOR_BUILD_VERSION","APPVEYOR_PULL_REQUEST_NUMBER","APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH"]),azure:c(["BUILD_BUILDID","BUILD_BUILDNUMBER","BUILD_CONTAINERID","BUILD_REPOSITORY_URI","SYSTEM_TEAMPROJECT","SYSTEM_COLLECTIONURI"]),awsCodeBuild:c(["CODEBUILD_BUILD_ID","CODEBUILD_BUILD_NUMBER","CODEBUILD_RESOLVED_SOURCE_VERSION","CODEBUILD_SOURCE_REPO_URL","CODEBUILD_SOURCE_VERSION"]),bamboo:c(["bamboo_buildNumber","bamboo_buildResultsUrl","bamboo_planRepository_repositoryUrl","bamboo_buildKey"]),bitbucket:c(["BITBUCKET_REPO_SLUG","BITBUCKET_REPO_OWNER","BITBUCKET_BUILD_NUMBER","BITBUCKET_PARALLEL_STEP","BITBUCKET_STEP_RUN_NUMBER","BITBUCKET_PR_ID","BITBUCKET_PR_DESTINATION_BRANCH","BITBUCKET_PR_DESTINATION_COMMIT"]),buildkite:c(["BUILDKITE_REPO","BUILDKITE_SOURCE","BUILDKITE_JOB_ID","BUILDKITE_BUILD_ID","BUILDKITE_BUILD_URL","BUILDKITE_BUILD_NUMBER","BUILDKITE_PULL_REQUEST","BUILDKITE_PULL_REQUEST_REPO","BUILDKITE_PULL_REQUEST_BASE_BRANCH"]),circle:c(["CIRCLE_JOB","CIRCLE_BUILD_NUM","CIRCLE_BUILD_URL","CIRCLE_PR_NUMBER","CIRCLE_PR_REPONAME","CIRCLE_PR_USERNAME","CIRCLE_COMPARE_URL","CIRCLE_WORKFLOW_ID","CIRCLE_PULL_REQUEST","CIRCLE_REPOSITORY_URL","CI_PULL_REQUEST"]),codeshipBasic:c(["CI_BUILD_ID","CI_REPO_NAME","CI_BUILD_URL","CI_PROJECT_ID","CI_BUILD_NUMBER","CI_PULL_REQUEST"]),codeshipPro:c(["CI_BUILD_ID","CI_REPO_NAME","CI_PROJECT_ID"]),concourse:c(["BUILD_ID","BUILD_NAME","BUILD_JOB_NAME","BUILD_PIPELINE_NAME","BUILD_TEAM_NAME","ATC_EXTERNAL_URL"]),codeFresh:c(["CF_BUILD_ID","CF_BUILD_URL","CF_CURRENT_ATTEMPT","CF_STEP_NAME","CF_PIPELINE_NAME","CF_PIPELINE_TRIGGER_ID","CF_PULL_REQUEST_ID","CF_PULL_REQUEST_IS_FORK","CF_PULL_REQUEST_NUMBER","CF_PULL_REQUEST_TARGET"]),drone:c(["DRONE_JOB_NUMBER","DRONE_BUILD_LINK","DRONE_BUILD_NUMBER","DRONE_PULL_REQUEST"]),githubActions:c(["GITHUB_WORKFLOW","GITHUB_ACTION","GITHUB_EVENT_NAME","GITHUB_RUN_ID","GITHUB_RUN_ATTEMPT","GITHUB_REPOSITORY"]),gitlab:c(["CI_PIPELINE_ID","CI_PIPELINE_URL","CI_BUILD_ID","CI_JOB_ID","CI_JOB_URL","CI_JOB_NAME","GITLAB_HOST","CI_PROJECT_ID","CI_PROJECT_URL","CI_REPOSITORY_URL","CI_ENVIRONMENT_URL","CI_DEFAULT_BRANCH"]),goCD:c(["GO_SERVER_URL","GO_ENVIRONMENT_NAME","GO_PIPELINE_NAME","GO_PIPELINE_COUNTER","GO_PIPELINE_LABEL","GO_STAGE_NAME","GO_STAGE_COUNTER","GO_JOB_NAME","GO_TRIGGER_USER","GO_REVISION","GO_TO_REVISION","GO_FROM_REVISION","GO_MATERIAL_HAS_CHANGED"]),googleCloud:c(["BUILD_ID","PROJECT_ID","REPO_NAME","BRANCH_NAME","TAG_NAME","COMMIT_SHA","SHORT_SHA"]),jenkins:c(["BUILD_ID","BUILD_URL","BUILD_NUMBER","ghprbPullId"]),semaphore:c(["SEMAPHORE_BRANCH_ID","SEMAPHORE_BUILD_NUMBER","SEMAPHORE_CURRENT_JOB","SEMAPHORE_CURRENT_THREAD","SEMAPHORE_EXECUTABLE_UUID","SEMAPHORE_GIT_BRANCH","SEMAPHORE_GIT_DIR","SEMAPHORE_GIT_REF","SEMAPHORE_GIT_REF_TYPE","SEMAPHORE_GIT_REPO_SLUG","SEMAPHORE_GIT_SHA","SEMAPHORE_GIT_URL","SEMAPHORE_JOB_COUNT","SEMAPHORE_JOB_ID","SEMAPHORE_JOB_NAME","SEMAPHORE_JOB_UUID","SEMAPHORE_PIPELINE_ID","SEMAPHORE_PLATFORM","SEMAPHORE_PROJECT_DIR","SEMAPHORE_PROJECT_HASH_ID","SEMAPHORE_PROJECT_ID","SEMAPHORE_PROJECT_NAME","SEMAPHORE_PROJECT_UUID","SEMAPHORE_REPO_SLUG","SEMAPHORE_TRIGGER_SOURCE","SEMAPHORE_WORKFLOW_ID","PULL_REQUEST_NUMBER"]),shippable:c(["SHIPPABLE_BUILD_ID","SHIPPABLE_BUILD_NUMBER","SHIPPABLE_COMMIT_RANGE","SHIPPABLE_CONTAINER_NAME","SHIPPABLE_JOB_ID","SHIPPABLE_JOB_NUMBER","SHIPPABLE_REPO_SLUG","IS_FORK","IS_GIT_TAG","IS_PRERELEASE","IS_RELEASE","REPOSITORY_URL","REPO_FULL_NAME","REPO_NAME","BUILD_URL","BASE_BRANCH","HEAD_BRANCH","IS_PULL_REQUEST","PULL_REQUEST","PULL_REQUEST_BASE_BRANCH","PULL_REQUEST_REPO_FULL_NAME"]),teamcity:null,teamfoundation:c(["BUILD_BUILDID","BUILD_BUILDNUMBER","BUILD_CONTAINERID"]),travis:c(["TRAVIS_JOB_ID","TRAVIS_BUILD_ID","TRAVIS_BUILD_WEB_URL","TRAVIS_REPO_SLUG","TRAVIS_JOB_NUMBER","TRAVIS_EVENT_TYPE","TRAVIS_COMMIT_RANGE","TRAVIS_BUILD_NUMBER","TRAVIS_PULL_REQUEST","TRAVIS_PULL_REQUEST_BRANCH","TRAVIS_PULL_REQUEST_SHA"]),wercker:null,netlify:c(["BUILD_ID","CONTEXT","URL","DEPLOY_URL","DEPLOY_PRIME_URL","DEPLOY_ID"]),layerci:c(["LAYERCI_JOB_ID","LAYERCI_RUNNER_ID","RETRY_INDEX","LAYERCI_PULL_REQUEST","LAYERCI_REPO_NAME","LAYERCI_REPO_OWNER","LAYERCI_BRANCH","GIT_TAG"])}),Fr=()=>{let{env:e}=process;return{appveyor:{sha:e.APPVEYOR_REPO_COMMIT,branch:e.APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH||e.APPVEYOR_REPO_BRANCH,message:Or(`
`,e.APPVEYOR_REPO_COMMIT_MESSAGE,e.APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED),authorName:e.APPVEYOR_REPO_COMMIT_AUTHOR,authorEmail:e.APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL},awsCodeBuild:{sha:e.CODEBUILD_RESOLVED_SOURCE_VERSION,remoteOrigin:e.CODEBUILD_SOURCE_REPO_URL},azure:{sha:e.BUILD_SOURCEVERSION,branch:e.BUILD_SOURCEBRANCHNAME,message:e.BUILD_SOURCEVERSIONMESSAGE,authorName:e.BUILD_SOURCEVERSIONAUTHOR,authorEmail:e.BUILD_REQUESTEDFOREMAIL},bamboo:{sha:e.bamboo_planRepository_revision,branch:e.bamboo_planRepository_branch,authorName:e.bamboo_planRepository_username,remoteOrigin:e.bamboo_planRepository_repositoryURL},bitbucket:{sha:e.BITBUCKET_COMMIT,branch:e.BITBUCKET_BRANCH},buildkite:{sha:e.BUILDKITE_COMMIT,branch:e.BUILDKITE_BRANCH,message:e.BUILDKITE_MESSAGE,authorName:e.BUILDKITE_BUILD_CREATOR,authorEmail:e.BUILDKITE_BUILD_CREATOR_EMAIL,remoteOrigin:e.BUILDKITE_REPO,defaultBranch:e.BUILDKITE_PIPELINE_DEFAULT_BRANCH},circle:{sha:e.CIRCLE_SHA1,branch:e.CIRCLE_BRANCH,authorName:e.CIRCLE_USERNAME,remoteOrigin:e.CIRCLE_REPOSITORY_URL},codeshipBasic:{sha:e.CI_COMMIT_ID,branch:e.CI_BRANCH,message:e.CI_COMMIT_MESSAGE,authorName:e.CI_COMMITTER_NAME,authorEmail:e.CI_COMMITTER_EMAIL},codeshipPro:{sha:e.CI_COMMIT_ID,branch:e.CI_BRANCH,message:e.CI_COMMIT_MESSAGE,authorName:e.CI_COMMITTER_NAME,authorEmail:e.CI_COMMITTER_EMAIL},codeFresh:{sha:e.CF_REVISION,branch:e.CF_BRANCH,message:e.CF_COMMIT_MESSAGE,authorName:e.CF_COMMIT_AUTHOR},drone:{sha:e.DRONE_COMMIT_SHA,branch:e.DRONE_SOURCE_BRANCH,message:e.DRONE_COMMIT_MESSAGE,authorName:e.DRONE_COMMIT_AUTHOR,authorEmail:e.DRONE_COMMIT_AUTHOR_EMAIL,remoteOrigin:e.DRONE_GIT_HTTP_URL,defaultBranch:e.DRONE_REPO_BRANCH},githubActions:{sha:e.GITHUB_SHA,branch:e.GH_BRANCH||e.GITHUB_REF,defaultBranch:e.GITHUB_BASE_REF,remoteBranch:e.GITHUB_HEAD_REF,runAttempt:e.GITHUB_RUN_ATTEMPT},gitlab:{sha:e.CI_COMMIT_SHA,branch:e.CI_COMMIT_REF_NAME,message:e.CI_COMMIT_MESSAGE,authorName:e.GITLAB_USER_NAME,authorEmail:e.GITLAB_USER_EMAIL,remoteOrigin:e.CI_REPOSITORY_URL,defaultBranch:e.CI_DEFAULT_BRANCH},googleCloud:{sha:e.COMMIT_SHA,branch:e.BRANCH_NAME},jenkins:{sha:e.GIT_COMMIT,branch:e.GIT_BRANCH},semaphore:{sha:e.SEMAPHORE_GIT_SHA,branch:e.SEMAPHORE_GIT_BRANCH,remoteOrigin:e.SEMAPHORE_GIT_REPO_SLUG},shippable:{sha:e.COMMIT,branch:e.BRANCH,message:e.COMMIT_MESSAGE,authorName:e.COMMITTER},snap:null,teamcity:null,teamfoundation:{sha:e.BUILD_SOURCEVERSION,branch:e.BUILD_SOURCEBRANCHNAME,message:e.BUILD_SOURCEVERSIONMESSAGE,authorName:e.BUILD_SOURCEVERSIONAUTHOR},travis:{sha:e.TRAVIS_PULL_REQUEST_SHA||e.TRAVIS_COMMIT,branch:e.TRAVIS_PULL_REQUEST_BRANCH||e.TRAVIS_BRANCH,message:e.TRAVIS_COMMIT_MESSAGE},wercker:null,netlify:{sha:e.COMMIT_REF,branch:e.BRANCH,remoteOrigin:e.REPOSITORY_URL},layerci:{sha:e.GIT_COMMIT,branch:e.LAYERCI_BRANCH,message:e.GIT_COMMIT_TITLE}}},ft=e=>{let t=Rt();return t?(0,u.chain)(e()).get(t).value():{}};function Hr(){return(0,u.chain)(_t()).omitBy(u.isNull).keys().value()}function kr(e){return e&&Hr().includes(e)}function Rt(){let e=wr();return Y("detected CI provider name: %s",e),e||null}function Gr(){return ft(_t)}function It(){return ft(Fr)}function Ct(e){let t=Gr(),r=Rt(),o=jr(e,r);return Y("detected CI provider: %s",r),Y("detected CI params: %O",t),Y("detected CI build ID: %o",o),{params:t,provider:r,ciBuildId:o}}function jr(e,t){return e?{source:"user",value:e}:kr(t)?{source:"server",value:null}:{source:"random",value:`auto:${me()}`}}var ht=require("@currents/commit-info"),Ot=require("lodash");var q=require("lodash");var le=i.extend("ci-git");function Tt(e){le("git commit existing info: %O",e);let t=It();le("commit info from provider environment variables: %O",t);let r=(0,q.transform)(e,(o,s,m)=>{let p=s||(t?t[m]:null);return o[m]=(0,q.defaultTo)(p,null)});return le("combined git and environment variables from provider: %O",r),r}var Vr=async()=>{let e=await(0,ht.commitInfo)();return Tt({branch:e.branch,remoteOrigin:e.remote,authorEmail:e.email,authorName:e.author,message:e.message,sha:e.sha,ghaEventData:e.ghaEventData})},Pt=(0,Ot.memoize)(Vr);var Ut=a(require("getos")),At=require("lodash"),R=require("os"),St=require("util"),Kr=async()=>{if((0,R.platform)()==="linux")try{let e=await(0,St.promisify)(Ut.default)();return"dist"in e&&"release"in e?[e.dist,e.release].join(" - "):(0,R.release)()}catch{return(0,R.release)()}return(0,R.release)()},Jr=async()=>{let e=await Kr();return{osName:(0,R.platform)(),osVersion:e,osCpus:[],osMemory:{free:(0,R.freemem)(),total:(0,R.totalmem)()}}},Lt=(0,At.memoize)(Jr);var Nt={name:"@currents/cmd",version:"1.0.0",main:"./dist/index.js",author:"Currents Software Inc",license:"GPL-3.0-or-later",description:"Currents CLI tools",scripts:{test:"vitest",rm:"rimraf dist",lint:'TIMING=1 eslint "**/*.ts*"',build:"tsup-node --minify --dts",dev:"tsup-node --watch --dts",release:"release-it","publish:npm":"npm run rm  && npm run build && ./publish.js"},devDependencies:{"@jest/reporters":"^29.7.0","@jest/types":"^29.6.3","@release-it/conventional-changelog":"^7.0.2","@types/debug":"^4.1.12","@types/fs-extra":"^11.0.4","@types/getos":"^3.0.4","@types/lodash":"^4.17.5","@types/node":"^20.14.2","@types/semver":"^7.5.8","@types/tmp":"^0.2.6","@types/uuid":"^9.0.8",jest:"^29.7.0",rimraf:"^5.0.7",tsup:"^8.1.0",typescript:"^5.4.5",vitest:"^1.3.0"},dependencies:{"@commander-js/extra-typings":"^11.1.0","@currents/commit-info":"1.0.1-beta.0",axios:"^1.7.2","axios-retry":"^4.4.0",commander:"^11.1.0",debug:"^4.3.5",dotenv:"^16.0.3",execa:"^8.0.1","fs-extra":"^11.2.0",getos:"^3.2.1","jest-cli":"^29.7.0","jest-config":"^29.7.0",lodash:"^4.17.21",nanoid:"^3.3.4","pretty-ms":"^7.0.1",semver:"^7.6.0","source-map-support":"^0.5.21",tmp:"^0.2.3","tmp-promise":"^3.0.3","ts-pattern":"^5.2.0"},bin:{currents:"./dist/bin/index.js","currents-cli":"./dist/bin/index.js"},files:["dist","!**/*.map","!**/*/*.map"],keywords:["cloud test dashboard","test reporter","test results","currents","currents dashboard","ci"],exports:{".":{import:"./dist/index.js",require:"./dist/index.js",types:"./dist/index.d.ts"},"./discovery/jest":{import:"./dist/discovery/jest/reporter.js",require:"./dist/discovery/jest/reporter.js",types:"./dist/discovery/jest/reporter.d.ts"},"./package.json":"./package.json"},"release-it":{npm:{publish:!1},github:{release:!0,releaseName:"${npm.name} v${version}"},plugins:{"@release-it/conventional-changelog":{preset:"angular",header:"# Changelog",ignoreVersion:!0,infile:"./CHANGELOG.md"}},git:{commitMessage:"chore: release ${npm.name} v${version}",tagName:"${npm.name}-v${version}"}}};var Q=Nt.version;async function Bt(){let e=F();if(!e)throw new Error("Currents config is missing!");e.debug&&_e();let t=await ze(e);fe(Wr(t.reportDir)),i("Reporter options: %o",t),B("Report directory: %s",t.reportDir);let r=await S(t.configFilePath);i("Report config: %o",r);let o=await Xe(t.reportDir);i("Found %d instance results in the reportDir: %s",o.length,t.reportDir);let s=qr(t.reportDir),m=await j(s),p=Qr(t.reportDir),E=null;if(m){let C=await S(s);d("Marker file detected. The report was already uploaded: %o",{runUrl:C.response.runUrl,isoDate:C.isoDate}),await j(p)&&(E=await S(p),i("Full test suite file detected: %s",p))}if(E)i("The discovery stage was skipped");else{if(E=await gt(r).getFullTestSuite(),zr(E))throw new Error("Failed to discover the full test suite!");await ce(p,JSON.stringify(E))}let I=E.length===1?E[0].name:null,Z={currents:e},L={type:r.framework,version:r.frameworkVersion,clientVersion:Q},ge=V.userFacingNanoid(),M=Ct(e.ciBuildId),A={};for await(let C of o){let O=await S(C);A[O.groupId]||(A[O.groupId]=[]),A[O.groupId].push(O)}for await(let C of Object.keys(A)){let O=A[C],ee=C;I&&(i("Default group found: %s, overwriting the group in the results",I),ee=I,O=O.map(N=>({...N,groupId:I})));try{let N=await Yr({ci:M,group:ee,instances:O,fullTestSuite:E,config:Z,machineId:ge,framework:L});i("Api response: %o",N),B("[%s] Run created: %s",ee,N.runUrl);let Qt={response:N,isoDate:new Date().toISOString()};await ce(s,JSON.stringify(Qt)),i("Marker file %s: %s",m?"overwritten":"created",s)}catch{throw new Error("Failed to upload the results to the dashboard")}}}async function Yr({ci:e,group:t,instances:r,fullTestSuite:o,config:s,machineId:m,framework:p}){let E=await Pt(),I=await Lt(),Z={browserName:"node",browserVersion:bt.default.coerce(process.version)?.version},{currents:L}=s,M={platform:{...Z,...I},ci:e,commit:E,group:t,fullTestSuite:o,config:s,projectId:L.projectId,recordKey:L.recordKey,ciBuildId:e.ciBuildId.value??void 0,tags:L.tag??[],machineId:L.machineId??m,framework:p,instances:r};return i("Creating run: %o",(0,Dt.mapValues)(M,(A,C)=>C==="recordKey"?"******":A)),We(M)}function qr(e){return W.default.join(e,"upload.marker.json")}function Qr(e){return W.default.join(e,"fullTestSuite.json")}function Wr(e){return W.default.join(e,`.debug-${new Date().toISOString()}.log`)}function zr(e){return e.length===0||e.some(t=>t.tests.length===0)}var Yt=a(require("fs"));var jt=require("@commander-js/extra-typings"),Vt=a(require("chalk"));var h=require("@commander-js/extra-typings");var yt=new h.Option("--ci-build-id <id>","the unique identifier for the recorded build (run)").env(P("ciBuildId")),Mt=new h.Option("-k, --key <record-key>","your secret Record Key obtained from Currents").env(P("recordKey")),vt=new h.Option("-p, --project-id <project>","the project ID for results reporting obtained from Currents").env(P("projectId")),xt=new h.Option("-t, --tag <tag>","comma-separated tag(s) for recorded runs in Currents").argParser(Xr),wt=new h.Option("--remove-title-tags","remove tags from test names in Currents, e.g. `Test name @smoke` becomes `Test name` in the dashboard").default(!1),Ft=new h.Option("--disable-title-tags","disable parsing tags from test title, e.g. `Test name @smoke` would not be tagged with `smoke` in the dashboard").default(!1),Ht=new h.Option("--machine-id <string>","unique identifier of the machine running the tests. If not provided, it will be generated automatically. See: https://docs.currents.dev/?q=machineId").env(P("machineId")),kt=new h.Option("--report-dir <string>","explicit path to the report directory").env(P("reportDir")),Gt=new h.Option("--debug","enable debug logs").env(P("debug")).default(!1);function Xr(e,t=[]){return e?t.concat(e.split(",").map(r=>r.trim())):t}var z="currents",Kt=(e=de())=>e.version(Q),Zr=`
----------------------------------------------------
\u{1F4D6} Documentation: https://docs.currents.dev
\u{1F919} Support:       support@currents.dev
----------------------------------------------------

${Vt.default.bold("Examples")}

Upload test results to Currents:
${T(`${z} upload --key <record-key> --project-id <id> --ci-build-id <build-id>`)}

Upload test results to Currents, add tags "tagA", "tagB" to the recorded run:
${T(`${z} upload --key <record-key> --project-id <id> --ci-build-id <build-id> --tag tagA --tag tagB`)}

Provide a custom path to the reports directory:
${T(`${z} upload --key <record-key> --project-id <id> --ci-build-id <build-id> --report-dir <report-dir>`)}
`,de=()=>new jt.Command().name(z).command("upload").showHelpAfterError("(add --help for additional information)").allowUnknownOption().description(`Upload test results generated by Currents reporters to https://currents.dev
${Zr}`).addOption(yt).addOption(Mt).addOption(vt).addOption(xt).addOption(wt).addOption(Ft).addOption(Ht).addOption(Gt).addOption(kt);var Jt=require("tmp-promise"),$t=async()=>{let{path:e}=await(0,Jt.file)();return e};var Ee=i.extend("cli"),X=class{constructor(){this.configFilePath=null;this.program=Kt(de()),this.cliOptions=this.program.parse().opts(),Ee("CLI options: %o",this.cliOptions),this.parsedConfig=Ae(this.cliOptions),Ee("Parsed config from CLI options: %o",this.parsedConfig)}async getConfigFilePath(){if(this.configFilePath)return this.configFilePath;let t=await $t();return Yt.default.writeFileSync(t,JSON.stringify(this.parsedConfig)),Ee("CLI options temp file path: %s",t),this.configFilePath=t,t}};import("dotenv/config");function eo(){let e=new X;Le(e.parsedConfig);let t=F();return B("Currents config: %o",{...t,recordKey:t?.recordKey?"*****":void 0}),Bt()}eo().then(()=>{Te("Script execution finished"),process.exit(0)}).catch(e=>{e instanceof qt.CommanderError&&(l(e.message),process.exit(e.exitCode)),l("Script execution failed:",e),process.exit(1)});
/*! For license information please see index.js.LEGAL.txt */
//# sourceMappingURL=index.js.map