import v from"debug";var c=v("currents");import{hostname as M}from"os";import{create as x}from"xmlbuilder2";var f=c.extend("lib"),E=M();function h(t){return{name:t,timestamp:new Date().toISOString(),children:[],hostname:E,stats:{failures:0,skipped:0,time:0}}}function b(t){f("Creating JUnit XML");let s=x({version:"1.0",encoding:"UTF-8"}).ele("testsuites",{name:"root",...t.summary?k(t.summary):{}});return Object.values(t.testFiles).forEach(e=>{f("Creating test suite element for file",e.name),A({file:e,summary:t.fileSummaries[e.name],parentElement:s})}),f("Ending XML document"),s.end({prettyPrint:!0})}function p(t){return Number((t/1e3).toFixed(6))}function F(t,s){for(let e of t){f("Flattening test",e.name,e.status);let m=e.status==="skipped"||e.status==="todo",r=e.isSuite&&m,n=!e.isSuite;if(r)s.ele("testcase",{name:e.name,time:e.time,testNumber:e.testNumber}).ele("skipped",S(e));else if(n){let l=s.ele("testcase",{name:e.name,time:e.time});if(e.status==="failed"){let u=`${e.failure?.message}
${N(e.failure?.stack)}`,i=l.ele("failure",{type:e.failure?.name,message:u});typeof e.failure?.stack=="object"?i.dat(N(e.failure.stack)):i.txt(e.failure?.stack)}else m&&l.ele("skipped",S(e))}e.children?.length&&F(e.children,s)}}function S(t){return{type:t.status==="todo"?"todo":void 0}}function A({file:t,summary:s,parentElement:e}){let m=s?k(s):{},r="time"in m?m.time:t.stats.time,n=e.ele("testsuite",{name:L(t.name),timestamp:t.timestamp,hostname:t.hostname,...m,...t.stats,time:r});F(t.children,n)}function k(t){return{success:t.success,time:p(t.duration_ms||0)}}function N(t){return t?`${JSON.stringify(t,null,2)}
`:""}function L(t){return t.replace(process.cwd(),"").replace(/"/g,"&quot;").replace(/^\//,"")}async function*g(t){let s={summary:null,fileSummaries:{},testFiles:{}},e=[];for await(let m of t){let{type:r,data:n}=m;if(r==="test:summary"){let o=n?.file;o?s.fileSummaries[o]=n:s.summary=n,c("Summary event received",m.data);continue}if(!n||typeof n.nesting!="number")continue;let{name:l,nesting:u,file:i}=n;if(!i||!l)continue;let d=l.replace(/"/g,"&quot;");if(!["test:start","test:pass","test:fail"].includes(r))continue;for(s.testFiles[i]||(s.testFiles[i]=h(i),c("Test file entry created",i,s.testFiles[i]));e.length<=u;)e.push({}),c("Nested test stack expanded to accommodate nesting level",i,d);let y=e[u-1]||s.testFiles[i];if(c('Parent node for nesting level %d - "%s"',u,y.name),r==="test:start"){let o=u===0?d:`${e[u-1].name} > ${d}`;c('Creating test node for "%s"',o);let T={name:o,status:"pending",children:[]};y.children.push(T),e[u]=T;continue}let a=e[u];if(!a||!a.name.endsWith(d)){console.warn(`Warning: Test node not found for event type "${r}" with name "${l}".`);continue}if(a.time=n.details?.duration_ms?p(n.details.duration_ms):void 0,s.testFiles[i].stats.time+=a.time||0,a.isSuite=n.details?.type==="suite",a.testNumber=n.testNumber,a.status=r==="test:pass"?"passed":"failed",n.skip&&(s.testFiles[i].stats.skipped+=1,a.status="skipped"),n.todo&&(s.testFiles[i].stats.skipped+=1,a.status="todo"),r==="test:fail"){s.testFiles[i].stats.failures+=1;let o=n.details?.error;a.failure={name:o?.failureType||o?.code,message:o?.message,stack:o}}}c("Final state:",s),yield b(s)}var P=g;export{P as default};
